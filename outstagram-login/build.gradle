buildscript {
    ext {
        springBootVersion = '2.0.6.RELEASE'
    }
    repositories {
        mavenCentral()

    }
    dependencies {

        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

    }
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


group 'com.project'
version '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8


repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('springCloudVersion', "Finchley.RELEASE")
}
dependencyManagement {

    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }

}


dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    // eureka 패키지 안에 ribbon이 포함되어있음.
    implementation('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix'

    //oauth2 증명 방식을 사용하려면
    compile group: 'org.springframework.cloud', name: 'spring-cloud-security'
    // https://mvnrepository.com/artifact/org.springframework.security/spring-security-oauth2-client
    compile group: 'org.springframework.security', name: 'spring-security-oauth2-client'


    // https://mvnrepository.com/artifact/org.springframework.security.oauth/spring-security-oauth2
    compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2'

    // 이거 넣어야 yml 파일 userInfoUrl 됨..
    // https://mvnrepository.com/artifact/org.springframework.security.oauth.boot/spring-security-oauth2-autoconfigure
    compile group: 'org.springframework.security.oauth.boot', name: 'spring-security-oauth2-autoconfigure'

    //jwt
    compile group: 'org.springframework.security', name: 'spring-security-jwt'

    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-stream
    compile group: 'org.springframework.cloud', name: 'spring-cloud-stream'

    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-stream-kafka
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-stream-kafka'

    //db
    implementation('org.springframework.boot:spring-boot-starter-jdbc')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    runtimeOnly('mysql:mysql-connector-java')
    compile("com.h2database:h2")

    //bdd
    testCompile('org.spockframework:spock-core:1.1-groovy-2.4') // Spock 의존성 추가
    testCompile('org.spockframework:spock-spring:1.1-groovy-2.4') // Spock 의존성 추가

    //sleuth
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-sleuth'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-sleuth-core'

    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-actuator')

    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    compileOnly('org.projectlombok:lombok:1.18.4')
    testCompileOnly('org.projectlombok:lombok:1.18.4')
    annotationProcessor 'org.projectlombok:lombok:1.18.8'

    runtimeOnly 'mysql:mysql-connector-java'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //common
    implementation 'org.apache.commons:commons-lang3:3.8.1'

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-parent', version: '2.0.5.RELEASE'

    testCompile('org.springframework.boot:spring-boot-starter-test')

    testImplementation 'io.projectreactor:reactor-test'
    compile group: 'io.projectreactor', name: 'reactor-core', version: '3.3.1.RELEASE'
}
